.histoneProcess = function(histoneFile, fragL, AllocThres, chrList, chrom.ref, capping, outfileLoc="./", outfile, bowtieIndex, csemDir, bowtieDir, vBowtie, mBowtie, pBowtie, bwaDir, bwaIndex, nBWA, oBWA, tBWA, mBWA, saveFiles){

  if(!file.exists(outfileLoc)){
    system(paste('mkdir ',outfileLoc,sep=''))
  }

  setwd(outfileLoc)
  
  histoneFormat <- tolower(sub(".*\\.", "", histoneFile))
  # Define filenames and extensions 
  filename <- strsplit(histoneFile, "/")[[1]]
  filename <- filename[length(filename)]
  filename <- strsplit(filename, paste('.', sub(".*\\.", "", filename), sep=''))[[1]][1]
  file.sai <- paste(filename, '.sai', sep='')
  file.sam <- paste(filename, '.sam', sep='')
  file.bam <- paste(filename, '.bam', sep='')
  file.bed <- paste(filename, '.bed', sep='')
  file.bed_AllocThres <- paste(filename, '_', AllocThres, '.bed', sep='')
  
  # Deal with different Histone file formats (fastq, sam, bam or bed)
  if(histoneFormat != "bed"){
    if(histoneFormat != "bam"){
      if(histoneFormat != "sam"){#Histone file is fastq format - will go through: alignment - CSEM multi-reads allocation steps
        if(!is.null(bowtieIndex)){
          message( "Info: Aligning Histone ChIP-seq reads using Bowtie." )
          ## Generates SAM file using Bowtie.
          system(paste(bowtieDir,'/bowtie -q -v ',vBowtie,' -a -m ',mBowtie,' -p ',pBowtie,' --sam ', bowtieIndex,' ', histoneFile,' ',file.sam, " 2>&1 | tee ", outfileLoc, "/priorProcessHistoneBowtie_temp.txt", sep=''))  
          
        }else{
          message( "Info: Aligning Histone ChIP-seq reads using BWA." )
          ## Generates the SAM file using BWA.
          system(paste(bwaDir, '/bwa aln -n ', nBWA, ' -o ', oBWA, ' -t ', tBWA, ' ', bwaIndex, ' ', histoneFile, ' >', file.sai, sep=''))
          system(paste(bwaDir, '/bwa samse -n ', mBWA, ' ', bwaIndex, ' ', file.sai, ' ', histoneFile, ' | ', bwaDir, '/xa2multi.pl >', file.sam, sep=''))
        }
      }else{#Histone file is in SAM format -  can skip alignment step and directly allocate multi-reads using CSEM
        
        print(paste("Histone file ", filename, " is in SAM format. The preprocessed aligned SAM file should contain multi-mapping reads. Otherwise, please provide FASTQ format Histone file.", sep = ""))
        file.sam <- histoneFile
      }
      
      message( "Info: Allocating Histone ChIP-seq multi-reads sam file using CSEM." )
      if(!is.null(bowtieIndex)){

        system(paste(csemDir, "/run-csem --sam -p ", pBowtie, ' ', file.sam, ' ', fragL, ' ', filename, sep=''))

      }else{

        system(paste(csemDir, "/run-csem --sam -p ", tBWA, ' ', file.sam, ' ', fragL, ' ', filename, sep=''))

      }
      
    }else{#Histone file is in BAM format - It is better to be the CSEM alignemnt results

      print(paste("Histone file ", filename, " is in SAM format. The preprocessed aligned BAM file should contain multi-mapping reads allocated by CSEM. Otherwise, please provide FASTQ format Histone file.", sep = ""))
      file.bam <- histoneFile
    }
    
    message( "Info: Transfering Histone ChIP-seq multi-reads alignment bam file into bed file using CSEM" )
    system(paste(csemDir,"/csem-generate-input --bed ",file.bam,' ',filename,sep='')) 

  }else{#Histone ChIP-seq file is in BED format - It is better to be the CSEM alignment results and will be used directly for prior construction

    print(paste("Histone file ", filename, " is in SAM format. The preprocessed aligned BED file should contain multi-mapping reads allocated by CSEM. Otherwise, please provide FASTQ format Histone file.", sep = ""))
    file.bed <- histoneFile

  }
  
  # Filter out the alignments with posterior probability < AllocThres/1000
  system(paste("awk '$5 >= ", AllocThres, " {print $0}' ", file.bed, ">", file.bed_AllocThres, sep=""))
  
  message( "Info: Reading the Histone ChIP-seq aligned read file and processing it into nucleotide-level files..." )
  .constructNeucleotideLevelCounts(outfileLoc, file.bed_AllocThres, fragL, outfileLoc, chrList, capping)
  countfile <- paste('_', file.bed_AllocThres, '_fragL', fragL, '_bin1.txt', sep='')
  
  message( "Info: Partitioning genome (Histone) ..." )
  r <- .clusterPositions_3cluster(countfile, chrList, outfileLoc, chrom.ref, outfile)
  link <- vector('list', length(chrList))
  names(link) <- chrList
  for(i in chrList){
    link[[i]] <- paste(outfileLoc, '/', i, '_', outfile, '_positions_3cluster.txt', sep='')
  }
  # Remove files if saveFiles=FALSE
  if(saveFiles == 'FALSE' | saveFiles == 'F'){
    system(paste('rm -rf ', file.sai, sep = ''))
    #system(paste("rm -rf ", file.bam, sep = ""))
    #system(paste("rm -rf ", file.sam, sep = ""))
    system(paste("rm -rf *sorted.bam*", sep = ""))
    #system(paste("rm -rf ", '*_', AllocThres, '.bed*', sep = ""))
    system(paste("rm -rf *_output_Dnasequantile.txt*", sep = ""))
  }
  return(link)
}
