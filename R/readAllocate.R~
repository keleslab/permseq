readAllocate = function(object = NULL, outfileLoc = "./", outputFormat = NULL, chipThres = NULL, chipFile = NULL, bowtieDir = NULL, bowtieIndex = NULL, vBowtie = 2, mBowtie = 99, pBowtie = 8, bwaDir = NULL, bwaIndex = NULL, nBWA = 2, oBWA = 1, tBWA = 8, mBWA = 99, csemDir = NULL, fragL = 200){

  #Refine the input parameters -- NULL NA numeric ""
  #paraList <- c(object, outfileLoc, outputFormat, chipThres, chipFile, bowtieDir, bowtieIndex, vBowtie, mBowtie, pBowtie, bwaDir, bwaIndex, nBWA, oBWA, tBWA, mBWA, csemDir, fragL)
  #for(para in paraList){
  #  para <- .refineParameters(para)
  #}

  #Create the outfileLoc if not exists
  if(!dir.exists(outfileLoc))
      system(paste('mkdir ', outfileLoc, sep=''))
  
  setwd(outfileLoc)

  
  # Check parameters
  if(prod(tolower(sub(".*\\.", "", chipFile)) %in% c("fastq", "sam")) == 0)
    stop("All ChIP-seq files must be in either fastq format or sam format.")

  if(!(tolower(outputFormat) %in% c("tagalign", "bed")))
    stop("outputFormat: Not supported format. readAllocate will generate bam output file, and transform into tagAlign or BED format if specified by outputFormat.")
  
  if(!is.null(chipThres))
    if(chipThres < 0 | chipThres > 1000)
      stop("chipThres must be a number between 0 and 1000.")
  
 if(!is.null(fragL))
   if(fragL<0)
     stop("fragL (fragment length) must be a positive value.")
  
  if(vBowtie<0 | vBowtie>3)
    stop("vBowtie (-v option in Bowtie) must be 0, 1, 2 or 3.")
  
  if(mBowtie%%1!=0 | mBowtie<0)
    stop("mBowtie (-m option in Bowtie) must be a positive integer.")
  
  if(pBowtie%%1!=0 | pBowtie<0)
    stop("pBowtie (-p option in Bowtie) must be a positive integer.")
  
  
  if(nBWA < 0 | nBWA > 3)
    stop("nBWA (bwa aln -n option in BWA) must be 0, 1, 2 or 3.")

  if(oBWA < 0 | oBWA > 1)
    stop("oBWA (bwa aln -o option in BWA) must be 0 or 1.")
  
  if(mBWA%%1!=0 | mBWA<0)
    stop("mBWA (bwa samse -n option in BWA) must be a positive integer.")
  
  if(tBWA%%1!=0 | tBWA<0)
    stop("tBWA (bwa aln -t option in BWA) must be a positive integer.")
  
  outfile <- NULL
  for(i in 1:length(chipFile)){#Extract ChIP-seq files names
    t1 <- strsplit(chipFile[i], '/')[[1]]
    t1 <- t1[length(t1)]
    t <- strsplit(t1, paste('.', sub(".*\\.", "", t1), sep=''))[[1]][1]
    outfile <- c(outfile, t)
  }
  
  if(is.null(object)){ # If object=NULL: Analize ChIP data without using prior files

    if(is.null(chipFile))
      stop("Please provide proper path to ChIP-seq file.")
    
    if(sum(tolower(sub(".*\\.", "", chipFile)) == "fastq") > 0 & is.null(bowtieIndex) & is.null(bwaIndex))
      stop("Please provide either Bowtie or BWA index for alignment.")
    
    #Alignment
    chipAlign <- list()
    chipSAM <- c()

    if(!is.null(bowtieIndex)){
      message( "Info: Aligning reads using Bowtie..." )
      for(i in 1:length(chipFile)){
        chipFormat <- tolower(sub(".*\\.", "", chipFile[i]))
        if(chipFormat == "fastq"){
          system(paste(bowtieDir, '/bowtie -q -v ', vBowtie, ' -a -m ', mBowtie, ' -p ', pBowtie, ' --sam ', bowtieIndex, ' ', chipFile[i], ' ', outfile[i], '.sam', " 2>&1 | tee ", outfileLoc, "/priorProcessChIP_", outfile[i], "_Bowtie_temp.txt", sep=''))
          chipAlign[[outfile[i]]] <- .summary(outfileLoc, paste("priorProcessChIP_", outfile[i], "_Bowtie_temp.txt", sep = ""))
          chipSAM[i] <- paste(outfileLoc, '/', outfile[i], '.sam', sep='')
        }else{
          print(paste("ChIP-seq file ", outfile[i], " is in SAM format. The preprocessed alignment should contain multi-mapping reads. Otherwise, please provide FASTQ format ChIP-seq file.", sep = ""))
        
          chipAlign[[outfile[i]]] <- NULL
          chipSAM[i] <- chipFile[i]
        }
      }
     }else{
       message( "Info: Aligning reads using BWA..." )
      
       for(i in 1:length(chipFile)){
         chipFormat <- tolower(sub(".*\\.", "", chipFile[i]))
         if(chipFormat == "fastq"){
      
           system(paste(bwaDir, '/bwa aln -n ', nBWA, ' -o ', oBWA, ' -t ', tBWA, ' ', bwaIndex, ' ', chipFile[i], ' >', outfile[i], '.sai', sep=''))
           system(paste(bwaDir, '/bwa samse -n ', mBWA, ' ', bwaIndex, ' ', outfile[i], '.sai', ' ', chipFile[i], ' | ', bwaDir, '/xa2multi.pl >', outfile[i], '.sam', sep=''))

           chipSAM[i] <- paste(outfileLoc,'/',outfile[i],'.sam',sep='')
         }else{
           print(paste("ChIP-seq file ", outfile[i], " is in SAM format. The preprocessed aligned SAM file should contain multi-mapping reads. Otherwise, please provide FASTQ format ChIP-seq file.", sep = ""))
           
           chipSAM[i] <- chipFile[i]
         }
         chipAlign[[outfile[i]]] <- NULL
       }
      
     }
  
    # Run CSEM
    message( "Info: Allocating multi-reads using CSEM..." )
    if(!is.null(bowtieIndex)){
      for(i in 1:length(chipFile)){
        CMD <- paste(csemDir,'/run-csem --sam  -p ', pBowtie, ' ', chipSAM[i], ' ', fragL, ' ', outfile[i], '_permseq', sep='') 
        system(CMD)
      }
    }else{
      for(i in 1:length(chipFile)){
        CMD <- paste(csemDir,'/run-csem --sam  -p ', tBWA, ' ', chipSAM[i], ' ', fragL, ' ', outfile[i], '_permseq', sep='') 
        system(CMD)
      }
      
    }
    

  }else{  # If object!=NULL: Analize ChIP data using prior information
    chipSAM <- object[['chipSAM']]
    chipFile <- object[['chipName']]
    bowtieIndex <- object[['bowtieInfo']]$bowtieIndex
    pBowtie <- object[['bowtieInfo']]$pBowtie
    tBWA <- object[['bwaInfo']]$tBWA
    csemDir <- object[['csemDir']]
    fragL <- object[['fragL']]
    
    message( "Info: Allocating multi-reads..." )
    for(i in 1:length(chipFile)){
      if(!is.null(bowtieIndex)){
	print("11111111")
	print(pBowtie)
        CMD <- paste(csemDir, '/run-csem --sam  -p ', pBowtie, ' --prior ', object[['prior']][i], ' ', chipSAM[i], ' ', fragL, ' ', outfile[i], '_permseq', sep='')
      	system(CMD)
      }else{
        print("22222222")
	print(tBWA)
        CMD <- paste(csemDir, '/run-csem --sam  -p ', tBWA, ' --prior ', object[['prior']][i], ' ', chipSAM[i], ' ', fragL, ' ', outfile[i], '_permseq', sep='')
      	system(CMD)
        
	}
    }
  }
  
  chipAlignFormat <- NULL
  if(!is.null(outputFormat)){
    message( "Info: Converting BAM to other formats..." )
    if(tolower(outputFormat)=='tagalign'){
      chipAlignFormat='_permseq.tagAlign'
      for(i in 1:length(outfile)){
        CMD <- paste(csemDir, '/csem-generate-input --tag-align ', outfile[i], '_permseq.bam', ' ', outfile[i], '_permseq', sep='')
        system(CMD)
       if(!is.null(chipThres))
         system(paste("awk '$5 >= ", chipThres, " {print $0}' ", outfile[i], '_permseq.tagAlign >', outfile[i], '_permseq.', chipThres,'.tagAlign', sep=""))
      }
    }else if(tolower(outputFormat)=='bed'){
      chipAlignFormat='_permseq.bed'
      for(i in 1:length(outfile)){
        CMD <- paste(csemDir, '/csem-generate-input --bed ', outfile[i], '_permseq.bam', ' ', outfile[i], '_permseq', sep='')
        system(CMD)
	if(!is.null(chipThres))
          system(paste("awk '$5 >= ", chipThres, " {print $0}' ", outfile[i], '_permseq.bed >', outfile[i], '_permseq.', chipThres, '.bed', sep=""))
      }
    }else{
      print('Not supported format! Please choose between tagAlign and BED.')
    }
    chipAlignFormat <- paste(outfile, chipAlignFormat, sep='')
  }
  
  # Summarize information
  if(length(object) == 0){
    if(!is.null(bowtieIndex)){
      # Sumarize Bowtie Information
      bowtieInfo <- vector('list', 5)
      names(bowtieInfo) <- c("bowtieIndex","bowtieDir","vBowtie","mBowtie","pBowtie")
      bowtieInfo$bowtieIndex <- bowtieIndex
      bowtieInfo$bowtieDir <- bowtieDir
      bowtieInfo$vBowtie <- vBowtie
      bowtieInfo$mBowtie <- mBowtie
      bowtieInfo$pBowtie <- pBowtie
      
      bwaInfo <- NULL
    }else{
    
      # Summarize BWA Information
      bwaInfo <- vector('list', 6)
      names(bwaInfo) <- c("bwaIndex","bwaDir","nBWA","oBWA","tBWA", "mBWA")
      bwaInfo$bwaIndex <- bwaIndex
      bwaInfo$bwaDir <- bwaDir
      bwaInfo$nBWA <- nBWA
      bwaInfo$oBWA <- oBWA
      bwaInfo$tBWA <- tBWA
      bwaInfo$mBWA <- mBWA
      
      bowtieInfo <- NULL
    }
      
    return(new(Class = "Prior",
               chipAlign = chipAlign,
               chipSAM = chipSAM,
               chipAllocate = paste(outfileLoc, "/", outfile, '_permseq.bam', sep=''),
               chipAlignFormat = paste(outfileLoc, "/", chipAlignFormat, sep = ""),
               outfileLoc = outfileLoc,
               chipName = outfile,
               chipNum = length(chipFile),
               fragL = fragL,
               bowtieInfo = bowtieInfo,
               bwaInfo = bwaInfo,
               csemDir = csemDir,
               dataNum = length(chipFile)))

  }else{
    #outfile_chip <- object@chipSAM
    #chipFileName <- outfile
    dnaseThres <- object@dnaseThres
    dnaseKnots <- object@dnaseKnots
    
    outfile_chipmean <- paste("chip", 1:length(outfile), "_chipmean", sep="")
    
    posLoc_bychr <- vector('list', length(object@dnaseName))
    names(posLoc_bychr) <- object@dnaseName
    posLoc_bychr[[length(object@dnaseName)]] <- object@posLoc_bychr
    
    #calculate averaged chip read counts according to object (dnase or histone information) so that we can save time for plotting.
    if(!file.exists((paste(outfileLoc, '/', names(posLoc_bychr)[1], '_', outfile_chipmean[1], sep='')))){
      .chipMeanCounts(object, posLoc_bychr, chipSAM, paste(outfile, '.sam', sep=''), outfileLoc, outfile_chipmean)
    }
    
    object['chipAllocate'] <- paste(outfileLoc, "/", outfile,'_permseq.bam', sep='')
    object['chipAlignFormat'] <- paste(outfileLoc, "/", chipAlignFormat, sep = "")
    object['outfileLoc'] <- outfileLoc

    return(object)
  }
  message( "Info: ---- Done! ----" )
}
